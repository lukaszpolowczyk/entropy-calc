define(["libs/libs", "main/question"], function(libs, Question) {
"use strict";

function Szpion (containerEl) {
this.szpionEl = libs.tempEl("szpion");

this.commonQuestionsEl = this.szpionEl.querySelector('.common-questions');
this.foreignQuestionsEl = this.szpionEl.querySelector('.foreign-questions');

this.commonQuestionsObs = [];
this.foreignQuestionsObs = [];

containerEl.appendChild(this.szpionEl);

this.resultEl = this.szpionEl.querySelector(".result");
//		
//		var questionC = new Question(this);
//		this.commonQuestionsObs.push(questionC);
//		this.commonQuestionsEl.appendChild(questionC.questionEl);
//		
//		var questionF = new Question(this);
//		this.foreignQuestionsObs.push(questionF);
//		this.foreignQuestionsEl.appendChild(questionF.questionEl);

this.addCommonQuestionButtonEl = this.szpionEl.querySelector(".add-common-question-button");
this.addForeignQuestionButtonEl = this.szpionEl.querySelector(".add-foreigns-question-button");

var leC = ()=> {
var questionC = new Question(this);
this.commonQuestionsObs.push(questionC);
this.commonQuestionsEl.appendChild(questionC.questionEl);
};
var leF = ()=> {
var questionF = new Question(this);
this.foreignQuestionsObs.push(questionF);
this.foreignQuestionsEl.appendChild(questionF.questionEl);
};

leC();
leF();

this.addCommonQuestionButtonEl.addEventListener("click", leC);
this.addForeignQuestionButtonEl.addEventListener("click", leF);

// wpisanie warości prawdopodobieństwa do każdego
// mozliwoś zmieny prawdopodobieństw ręcznie

this.count();
}

//	Szpion.prototype.questionsSideCount = function () {
//		this.commonTrueAnswersObs = this.commonQuestionsObs.filter((commonQuestion)=> {
//			return commonQuestion.answer === true;
//		});
//		this.commonFalseAnswersObs = this.commonQuestionsObs.filter((commonQuestion)=> {
//			return commonQuestion.answer === false;
//		});
//		this.commonNoAnswersObs = this.commonQuestionsObs.filter((commonQuestion)=> {
//			return commonQuestion.answer === "";
//		});
//
//		this.commonTrueAnswersObsLength = this.commonTrueAnswersObs.length;
//		this.commonFalseAnswersObsLength = this.commonFalseAnswersObs.length;
//		this.commonNoAnswersObsLength = this.commonNoAnswersObs.length;
//
//		var commonAnswerVal = 1 / (this.commonTrueAnswersObsLength + this.commonFalseAnswersObsLength);
//
//		var commonAnswersVal = commonAnswerVal * this.commonTrueAnswersObsLength;
//	};

//	this.foreignTrueAnswersObs = this.foreignQuestionsObs.filter((foreignQuestion)=> {
//		return foreignQuestion.answer === true;
//	});
//	this.foreignFalseAnswersObs = this.foreignQuestionsObs.filter((foreignQuestion)=> {
//		return foreignQuestion.answer === false;
//	});
//	this.foreignNoAnswersObs = this.foreignQuestionsObs.filter((foreignQuestion)=> {
//		return foreignQuestion.answer === "";
//	});
//
//	this.foreignTrueAnswersObsLength = this.foreignTrueAnswersObs.length;
//	this.foreignFalseAnswersObsLength = this.foreignFalseAnswersObs.length;
//	this.foreignNoAnswersObsLength = this.foreignNoAnswersObs.length;
//
//	var foreignAnswerVal = 1 / (this.foreignTrueAnswersObsLength + this.foreignFalseAnswersObsLength);
//
//	var foreignAnswersVal = foreignAnswerVal * this.foreignTrueAnswersObsLength;

//	var questionsSideCount = function (questionsObs, sideAnswerImportance) {
//		var side = {};
//		side.trueAnswersObs = questionsObs.filter((question)=> {
//			return question.answer === true;
//		});
//		side.falseAnswersObs = questionsObs.filter((question)=> {
//			return question.answer === false;
//		});
//		side.noAnswersObs = questionsObs.filter((question)=> {
//			return question.answer === "";
//		});
//
//		side.trueAnswersObsLength = side.trueAnswersObs.length;
//		side.falseAnswersObsLength = side.falseAnswersObs.length;
//		side.noAnswersObsLength = side.noAnswersObs.length;
//
//		side.answerVal = 1 / (side.trueAnswersObsLength + side.falseAnswersObsLength);
//
//		side.answersVal = side.answerVal * side[sideAnswerImportance];
//
//		side.numbers = `0`;
//
//		if (side[sideAnswerImportance] > 0) {
//			side.numbers = `${libs.round(side.answerVal, 3)} + `.repeat(side[sideAnswerImportance]-1);
//			side.numbers += libs.round(side.answerVal, 3);
//		}
//		
////		for (var i = 1; i < side.trueAnswersObsLength; i++) {
//		//	side.numbers += `${libs.round(side.answerVal, 3)} + `;
////		}
//		
//		return side;
//	};

var questionsSideCount = function (questionsObs) {
var side = {};
side.trueAnswersObs = questionsObs.filter((question)=> {
return question.answer === true;
});
side.falseAnswersObs = questionsObs.filter((question)=> {
return question.answer === false;
});
side.noAnswersObs = questionsObs.filter((question)=> {
return question.answer === "";
});

side.trueAnswersObsLength = side.trueAnswersObs.length;
side.falseAnswersObsLength = side.falseAnswersObs.length;
side.answersObsLength = side.trueAnswersObsLength + side.falseAnswersObsLength;
side.noAnswersObsLength = side.noAnswersObs.length;

//		side.answerVal = 1 / side.answersObsLength;
//		if (side.answerVal > 1) {
//			side.answerVal = 0;
//		}

//		side.answersVal = side.answerVal * side.trueAnswersObsLength;
//		if (side.trueAnswersObsLength === 0) {
//			side.answersVal = 1;
//		}
//
//		side.numbers = `0`;
//
//		if (side[sideAnswerImportance] > 0) {
//			side.numbers = `${libs.round(side.answerVal, 3)} + `.repeat(side[sideAnswerImportance]-1);
//			side.numbers += libs.round(side.answerVal, 3);
//		}

//		for (var i = 1; i < side.trueAnswersObsLength; i++) {
//	side.numbers += `${libs.round(side.answerVal, 3)} + `;
//		}

return side;
};

Szpion.prototype.count = function () {
var common = questionsSideCount(this.commonQuestionsObs);
var foreign = questionsSideCount(this.foreignQuestionsObs);

var allAnswersObsLength = common.answersObsLength + foreign.answersObsLength;

var weightSingleAnswer = 1 / allAnswersObsLength;

var positiveAnswers = common.trueAnswersObsLength + foreign.falseAnswersObsLength;
var negativeAnswers = common.falseAnswersObsLength + foreign.trueAnswersObsLength;
var noSzpion = weightSingleAnswer * positiveAnswers;
var szpion = 1 - noSzpion;

var weightSingleAnswerR = libs.round(weightSingleAnswer, 3);
var noSzpionR = libs.round(noSzpion, 3);
var szpionR = libs.round(szpion, 3);

var calculations = `<br/>1 (P(Ω)=1) dzielone na ${allAnswersObsLength} (ilość odpowiedzi) równa się ${weightSingleAnswerR} (waga pojedynczej odpowiedzi).<br/>Ilość odpowiedzi "Prawda" z "Współny interes" i "Fałsz" z "Obcy interes" wynosi ${positiveAnswers}.<br/>Ilość odpowiedzi "Fałsz" z "Współny interes" i "Prawda" z "Obcy interes" wynosi ${negativeAnswers}.<br/>${positiveAnswers} mnżone razy ${weightSingleAnswerR} równa się ${noSzpionR} prawdopodobieństwa na "nie bycie agentem".<br/>${negativeAnswers} mnożone razy ${weightSingleAnswerR} równa się ${szpionR} prawdopodobieństwa na "bycie agentem".`;

//		common.answersVal = common.answerVal * common.trueAnswersObsLength;
//
//		common.numbers = `0`;
//
//		if (common.trueAnswersObsLength > 0) {
//			common.numbers = `${libs.round(common.answerVal, 3)} + `.repeat(common.trueAnswersObsLength-1);
//			common.numbers += libs.round(common.answerVal, 3);
//		}
//		
//		
//		foreign.answersVal = foreign.answerVal * foreign.falseAnswersObsLength;
//
//		foreign.numbers = `0`;
//
//		if (foreign.trueAnswersObsLength > 0) {
//			foreign.numbers = `${libs.round(foreign.answerVal, 3)} + `.repeat(foreign.trueAnswersObsLength-1);
//			foreign.numbers += libs.round(foreign.answerVal, 3);
//		}


// result
//var preResult = common.answersVal * foreign.answersVal;
//var result = 1 - preResult;


//var numbersAll = "";//`(${common.numbers}) * (${foreign.numbers}) = ${libs.round(common.answersVal, 3)} * ${libs.round(foreign.answersVal, 3)} = ${libs.round(preResult, 3)} <br/> 1 - ${libs.round(preResult, 3)} = ${libs.round(result, 3)}`;

if (common.answersObsLength === 0 && foreign.answersObsLength === 0) {
this.resultEl.innerHTML = `Wynik: Brak odpowiedzi. Brak informacji. Maksymalna entropia. 50% szansy na "bycie agentem" i 50% szansy na nie "bycie agentem".`;
} else
if (common.trueAnswersObsLength === 0 && foreign.trueAnswersObsLength === 0) {
this.resultEl.innerHTML = `Wynik: 50% szansy na "bycie agentem" i 50% szansy na nie "bycie agentem"`;
} //else 
//		if (common.answersObsLength <= 2 || foreign.answersObsLength <= 2) {
//			this.resultEl.innerHTML = `Wynik: Za mało odpowiedzi. Potrzeba co najmniej trzy z "Wspólny interes" i co najmniej trzy z "Obcy interes".`;
//		} //else 
//		if (common.trueAnswersObsLength === foreign.trueAnswersObsLength && common.falseAnswersObsLength === foreign.falseAnswersObsLength) {
//			this.resultEl.innerHTML = "Wynik: Maksymalna entropia. 50% szansy na bycie agentem i 50% szansy na nie bycie agentem.";
//}
else {
var preResult = common.answersVal * foreign.answersVal;
//var result = 1 - preResult;
if (szpion >= 0 && szpion <= 1 && noSzpion >= 0 && noSzpion <= 1) {
this.resultEl.innerHTML = `Wynik: ${libs.round(szpion*100, 1)}% szansy na "bycie agentem" i ${libs.round(noSzpion*100, 1)}% szansy na nie "bycie agentem".<br/>${calculations}`;
} else {
this.resultEl.innerHTML = "Brak wyniku: Jakiś błąd.";
}
}


//		else 
//		if (common.trueAnswersObsLength === 1 && common.falseAnswersObsLength === 0 && foreign.answersObsLength === 0) {
//			this.resultEl.innerHTML = "Wynik: 0% na bycie agentem i 100% na nie bycie agentem.";
//		} else 
//		if (common.answersObsLength === 0 && foreign.trueAnswersObsLength === 1 && foreign.falseAnswersObsLength === 0) {
//			this.resultEl.innerHTML = "Wynik: 100% na bycie agentem i 0% na nie bycie agentem.";
//		} else 
//		if (common.falseAnswersObsLength === 1 && common.trueAnswersObsLength === 0 && foreign.answersObsLength === 0) {
//			this.resultEl.innerHTML = "Wynik: 100% na bycie agentem i 0% na nie bycie agentem.";
//		}
//		if (result > 0.5 && result <= 1) {
//			this.resultEl.innerHTML = `Wynik: Agent na ${libs.round(result*100, 3)}%. <br/>${numbersAll}`;
//		} else
//		if (result >= 0 && result <= 0.5) {
//			this.resultEl.innerHTML = `Wynik: agent na ${libs.round(result*100, 3)}%. <br/>${numbersAll}`;
//		} else {
//			this.resultEl.innerHTML = "Wynik: Brakujące dane lub jakiś błąd w programie. Potrzeba co najmniej jednej odpowiedzi o współny interes i conajmniej jednej o obcy interes.";
//		}
};

// zrobić klasę z questionsBlock żeby się nie duplikować tak bardzo

return Szpion;

});
// zrobić snippeta z this.questionEl = libs.tempEl("question"); i z this.foreignQuestionsEl = this.szpionEl.querySelector('.foreign-questions'); i z obiektem który ma to i reszte też